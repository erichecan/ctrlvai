import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
// Assuming fetch is available in Node.js >= 18 or via a polyfill/library like node-fetch
// If running on older Node.js or without fetch, you might need to install and import 'node-fetch'
// import fetch from 'node-fetch'; 

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const SCRAPED_DATA_FILE = path.join(__dirname, '../toolify_content.json');
const API_URL = 'http://localhost:3000/api/tools';

async function importTools() {
  console.log(`Reading scraped data from ${SCRAPED_DATA_FILE}...`);
  try {
    const data = await fs.readFile(SCRAPED_DATA_FILE, 'utf-8');
    const scrapedContent = JSON.parse(data);

    if (!scrapedContent.featuredTools || !Array.isArray(scrapedContent.featuredTools)) {
      console.error('Scraped data format is unexpected: missing or invalid featuredTools array.');
      return;
    }

    console.log(`Found ${scrapedContent.featuredTools.length} featured tools in scraped data. Importing...`);

    for (const tool of scrapedContent.featuredTools) {
      // Map scraped data to AITool format
      const toolToImport = {
        name: tool.name || 'Unnamed Tool',
        description: tool.description || 'No description provided.',
        logo: '', // Scraped data doesn't have logo URL
        url: '', // Scraped data doesn't have URL
        isPaid: !tool.isFree, // Assuming isFree is boolean or can be evaluated
        features: [], // Scraped data doesn't have detailed features
        tags: [], // Scraped data doesn't have tags
        category: 'Uncategorized', // Default category
        // id will be generated by the API
      };

      console.log(`Importing tool: ${toolToImport.name}`);

      try {
        const response = await fetch(API_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(toolToImport),
        });

        const result = await response.json();

        if (result.success) {
          console.log(`Successfully imported tool: ${result.tool.name} (ID: ${result.tool.id})`);
        } else {
          console.error(`Failed to import tool ${toolToImport.name}:`, result.error);
        }
      } catch (apiError) {
        console.error(`Error posting tool ${toolToImport.name} to API:`, apiError);
      }
    }

    console.log('Import process finished.');

  } catch (fileError) {
    console.error('Error reading or parsing scraped data file:', fileError);
  }
}

importTools(); 